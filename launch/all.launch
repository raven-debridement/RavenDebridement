<!-- a general launch file that should work on most systems -->
<launch>

    <!-- Launches cameras -->
    <include file="$(find raven_2_vision)/launch/prosilica/stereo_BC.launch" />
    <!--<include file="$(find RavenDebridement)/launch/stereo_AD.launch" />-->

    <!-- Rectifies images, produces disparity image and point cloud -->
    <!--<node ns="BC" pkg="stereo_image_proc" type="stereo_image_proc" name="stereo_image_proc">
        <param name="approximate_sync" type="bool" value="true" />
        <param name="queue_size" type="int" value="20" />
		<param name="min_disparity" type="int" value="128" />
		<param name="disparity_range" type="int" value="128" />
    </node>-->

    <!-- Creates static transform from world to left_BC. Changeable using reconfigure -->
    <!--<node pkg="transforms" type="transform_server.py" name="transform_broadcaster" />-->

    <!-- Foam pose detection -->
    <node name="foam_poses" type="foam_segmenter" pkg="RavenDebridement" output="screen">
        <remap from="disparity" to="BC/disparity" />
        <remap from="left/camera_info" to="BC/left/camera_info" />
        <remap from="right/camera_info" to="BC/right/camera_info" />
        <remap from="left/image_rect_color" to="BC/left/image_rect_color" />
        <remap from="right/image_rect_color" to="BC/right/image_rect_color" />
    </node>

	<!-- Gripper Segmentation -->
    <!--<node pkg="raven_pose_estimator" type="color_gripper_segmenter.new" name="gripper_segmenter" output="screen" />-->

    <!-- For AR marker detection -->
    <include file="$(find stereo_marker_detect)/launch/stereo_detector.launch" />
    
    <node name="color_gripper_segmenter" type="color_gripper_segmenter" pkg="RavenDebridement">
        
    </node>

</launch>

