<!--  -->
<launch>

    <!-- Launches cameras -->
    <include file="$(find raven_2_vision)/launch/prosilica/stereo_BC.launch" />
    <!--<include file="$(find RavenDebridement)/launch/stereo_AD.launch" />-->

    <!-- Creates static transform from 0_link to camera_link (the primesense) -->
    <!---<node pkg="tf" type="static_transform_publisher" name="zero_link_camera_link" args="-0.001 0.269 0.148 -1.500 0.589 0.052 0_link camera_link 100" /> -->
    <node pkg="tf" type="static_transform_publisher" name="zero_link_camera_link" args="-0.005 0.257 0.141 -1.482 0.648 0.084 0_link camera_link 100" />
    <node pkg="tf" type="static_transform_publisher" name="zero_link_phasespace" args="0.087 1.778 -0.770 -0.273 -0.050 1.586 0_link phasespace 100" />
    
    <!-- For AR marker detection -->
    <!--<include file="$(find stereo_marker_detect)/launch/stereo_detector.launch" />-->
    
    <node name="color_gripper_segmenter_R" type="color_gripper_segmenter.py"  pkg="raven_2_vision" output="screen">
        <param name="arm" type="string" value="R" />
    </node>
        
    <node name="color_gripper_segmenter_L" type="color_gripper_segmenter.py"  pkg="raven_2_vision" output="screen">
        <param name="arm" type="string" value="L" />
    </node>

    <node name="phasespace_tracker" type="phasespace.py"  pkg="raven_2_vision" />

    <!-- Viewers for segmented gripper points -->
    <node pkg="image_view" type="image_view" respawn="false" name="L_blue_left" output="screen">
	<param name="autosize" type="bool" value="False" />
	<param name="window_name" type="str" value="'L_blue_left'" />      
	<remap from="image" to="L_blue_left" />
    </node>
    <node pkg="image_view" type="image_view" respawn="false" name="L_blue_right" output="screen">
	<param name="autosize" type="bool" value="False" />
	<param name="window_name" type="str" value="'L_blue_right'" />      
	<remap from="image" to="L_blue_right" />
    </node>
    <node pkg="image_view" type="image_view" respawn="false" name="L_purple_left" output="screen">
	<param name="autosize" type="bool" value="False" />
	<param name="window_name" type="str" value="'L_purple_left'" />      
	<remap from="image" to="L_purple_left" />
    </node>
    <node pkg="image_view" type="image_view" respawn="false" name="L_purple_right" output="screen">
	<param name="autosize" type="bool" value="False" />
	<param name="window_name" type="str" value="'L_purple_right'" />      
	<remap from="image" to="L_purple_right" />
    </node>
    <node pkg="image_view" type="image_view" respawn="false" name="R_green_left" output="screen">
	<param name="autosize" type="bool" value="False" />
	<param name="window_name" type="str" value="'R_green_left'" />      
	<remap from="image" to="R_green_left" />
    </node>
    <node pkg="image_view" type="image_view" respawn="false" name="R_green_right" output="screen">
	<param name="autosize" type="bool" value="False" />
	<param name="window_name" type="str" value="'R_green_right'" />      
	<remap from="image" to="R_green_right" />
    </node>
    <node pkg="image_view" type="image_view" respawn="false" name="R_orange_left" output="screen">
	<param name="autosize" type="bool" value="False" />
	<param name="window_name" type="str" value="'R_orange_left'" />      
	<remap from="image" to="R_orange_left" />
    </node>
    <node pkg="image_view" type="image_view" respawn="false" name="R_orange_right" output="screen">
	<param name="autosize" type="bool" value="False" />
	<param name="window_name" type="str" value="'R_orange_right'" />      
	<remap from="image" to="R_orange_right" />
    </node>
    
    <!-- Foam pose detection -->
    <node ns="BC" name="foam_poses" pkg="RavenDebridement" type="foam_segmenter" output="screen">
        <remap from="disparity" to="downsampled_disparity" />
        <remap from="left/camera_info" to="left/camera_info" />
        <remap from="right/camera_info" to="right/camera_info" />
        <remap from="left/image_rect_color" to="left/image_rect_color" />
        <remap from="right/image_rect_color" to="right/image_rect_color" />
    </node>

    <include file="$(find openni_launch)/launch/openni.launch" />

</launch>

