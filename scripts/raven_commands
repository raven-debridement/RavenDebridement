#!/usr/bin/env python

import roslib
roslib.load_manifest('raven_debridement_master')
import rospy
import tf
import math
import image_geometry
from ar_pose.msg import ARMarker
from ar_pose.msg import ARMarkers
from geometry_msgs.msg import PoseWithCovariance
from geometry_msgs.msg import Pose
from geometry_msgs.msg import PoseStamped
from geometry_msgs.msg import Quaternion
from geometry_msgs.msg import QuaternionStamped
from sensor_msgs.msg import CameraInfo
from raven_2_msgs.msg import *

class Master:
	def __init__(self, marker_poses, commands):
		self.pose_sub = rospy.Subscriber(marker_poses, ARMarkers, self.callback)
		self.command_pub = rospy.Publisher(commands, RavenCommand)
		
	def callback(self, data):
		for marker in data.markers:
			

	def command_raven(self, init_pose, dest_pose, pose_option, grasp_option):
		raven_cmd = RavenCommand()
		arm_cmd = ArmCommand()
		arm_cmd.active = True
		
		tool_cmd = ToolCommand()
		tool_cmd.pose_option = pose_option
		tool_cmd.pose = dest_pose
		tool_cmd.grasp = grasp_option

		arm_cmd.tool_command = tool_cmd
		
		raven_cmd.pedal_down = True
		raven_cmd.arms.append(arm_cmd)

		self.command_pub.publish(raven_cmd)
		


def main():
	m = Master()
	rospy.spin()


if __name__=='__main__':
    main()


