#!/usr/bin/env python

import roslib
roslib.load_manifest('RavenDebridement')
import rospy
import message_filters

import RavenDebridement.foam_util as Util

from RavenDebridement.msg import FoamPoints

import cv
import numpy
import scipy.cluster.vq

from sensor_msgs.msg import Image, CameraInfo
from stereo_msgs.msg import DisparityImage
from geometry_msgs.msg import PointStamped
from visualization_msgs.msg import Marker, MarkerArray
import cv_bridge

import operator

import tfx

import threading

import IPython

RED_LOWER_HSV = cv.Scalar(0, 120, 50)
RED_UPPER_HSV = cv.Scalar(6, 255, 255)
LOWERHSV = RED_LOWER_HSV
UPPERHSV = RED_UPPER_HSV
LOWERHSV2 = cv.Scalar(170, 120, 50)
UPPERHSV2 = cv.Scalar(180, 255, 255)

class FoamSegmenter():
    def __init__(self, left_camera, right_camera, rgb_camera, depth_camera, disparity, topic, num_objects=None, show_image=False, track=False):
        self.image = {'l': None, 'r': None, 'b':None, 'd':None}
        self.info = {'l': None, 'r': None, 'b':None, 'd':None}
        self.bridge = cv_bridge.CvBridge()
        self.calculating = False
        self.foundCentroidInLeft = False
        
        self.track = track
        
        self.num_objects = num_objects
        self.object_centers = [None] * num_objects
        self.center_threshold = 0.015

        self.disparityImg = None
        self.hsvImg = cv.CreateImage((1280, 960), 8, 3)
        self.threshImg = cv.CreateImage((1280, 960), 8, 1)
        self.threshImg2 = cv.CreateImage((1280, 960), 8, 1)
        
        self.object_size = 0.01
        
        self.min_z_value = -.162
        
        self.boxBottomLeft = tfx.point([.24,0,0],frame='/world')
        self.boxTopRight = tfx.convertToFrame(tfx.point([0,0,0]), '/world', '/frame_top_R', wait=10)
        self.boxTopRight.x = 2.*self.boxTopRight.x
        self.boxTopRight.z = .09

        self.pointpub = rospy.Publisher(topic, FoamPoints)
        self.markerpub = rospy.Publisher(topic+'_marker_array', MarkerArray)
        self.imagepub = rospy.Publisher(topic + '_image', Image)
        
        self.show_image = show_image

        rospy.Subscriber(left_camera + "/camera_info", CameraInfo, self.leftInfoCallback)
        rospy.Subscriber(right_camera + "/camera_info", CameraInfo, self.rightInfoCallback)
        rospy.Subscriber(disparity, DisparityImage, self.disparityCallback)
        rospy.Subscriber(left_camera + "/image_rect_color", Image, self.leftImageCallback, queue_size = 1)
        
        
        rospy.Subscriber(rgb_camera + "/camera_info", CameraInfo, self.rgbInfoCallback)
        rospy.Subscriber(depth_camera + "/camera_info", CameraInfo, self.depthInfoCallback)
        rospy.Subscriber(rgb_camera + "/image_rect_color", Image, self.rgbImageCallback, queue_size = 1)
        rospy.Subscriber(depth_camera + "/image_rect", Image, self.depthImageCallback, queue_size = 1)
        #rospy.Subscriber(right_camera + "/image_rect_color", Image, self.rightImageCallback, queue_size = 1)
        

    def disparityCallback(self, msg):
        image = self.bridge.imgmsg_to_cv(msg.image, "mono8")
        self.disparityImg = image
        self.minDisparity = msg.min_disparity

    def leftInfoCallback(self, msg):
        if self.info['l']:
            return
        self.info['l'] = msg

    def rightInfoCallback(self, msg):
        if self.info['r']:
            return
        self.info['r'] = msg
    
    def rgbInfoCallback(self, msg):
        if self.info['b']:
            return
        self.info['b'] = msg
        self.rhsvImg = cv.CreateImage((msg.width, msg.height), 8, 3)
        self.rthreshImg = cv.CreateImage((msg.width, msg.height), 8, 1)
        self.rthreshImg2 = cv.CreateImage((msg.width, msg.height), 8, 1)
        self.K = numpy.array([msg.K[0:3], msg.K[3:6], msg.K[6:9]])
        self.invK = numpy.linalg.inv(self.K)
    
    def depthInfoCallback(self, msg):
        if self.info['d']:
            return
        self.info['d'] = msg
        
    #def rightImageCallback(self, msg):
    #    self.image['r'] = self.process(msg, 'r')
    
    def rgbImageCallback(self, msg):
        if not self.info['b'] or not self.image['d'] or rospy.is_shutdown():
            return
        
        # Threshold the image
        self.image['b'] = self.process(msg, 'b')
        image = self.image['b']
        if self.show_image:
            # Uncomment to show the thresholded image
            Util.showImage(image, "rgbthreshed")
            
        foamPoints = numpy.zeros((3,0))
        for i in xrange(image.width):
            for j in xrange(image.height):
                if image[j,i] != 0:
                    depth = self.image['d'][j, i]
                    if not numpy.isnan(depth):
                        p = numpy.array([[depth*i], [depth*j], [depth]])
                        p = numpy.dot(self.invK, p)
                        foamPoints = numpy.append(foamPoints, p, axis=1)
        
        foamPoints = numpy.transpose(foamPoints)
        whitened = scipy.cluster.vq.whiten(foamPoints)
        centroids = scipy.cluster.vq.kmeans(whitened, 6)
        print foamPoints
        print centroids
        
        """    
        # find contours
        storage = cv.CreateMemStorage(0)
        
        contours = cv.FindContours(image, storage, mode=cv.CV_RETR_LIST, method=cv.CV_CHAIN_APPROX_SIMPLE)

        if len(contours) == 0:
            return

        # Find the first contour with length > 60 and get the center
        color = cv.Scalar(255)
        holeColor = cv.Scalar(255)
        maxLevel = 1
        thickness = cv.CV_FILLED
        xys = []
        found = False
        
        origImg = self.bridge.imgmsg_to_cv(msg, "bgr8")
        #cv.DrawContours(origImg, contours, color, holeColor, maxLevel, thickness)
        #cv.DrawContours(origImg,contours,-1,(0,255,0),3)

        
        while contours is not None and not rospy.is_shutdown():
            contour = contours[:]
            contours = contours.h_next()
            if len(contour) < 60:
                continue
            
            splitContours = self.splitByAspect(contour)
            #splitContours = [contour]
            
            #y = int(sum(sum([height for width, height in splitContour])/float(len(splitContour)) for splitContour in splitContours)/float(len(splitContours)))
            
            import numpy as np
            for index in range(len(splitContours)):
                if index != 0: break
                splitContour = splitContours[index]
                if len(splitContour) < 60:
                    continue
                for x, y in splitContour:
                    origImg[y,x] = np.array([(index+1)*50,0,0])
            
            for splitContour in splitContours:
                if len(splitContour) == 0:
                    continue
                
                    #cv.Set2D(origImg,x,y,(0,255,0))
                
                #found = True
                cv.FillPoly(image, [splitContour], color)
                
                heights = [height for width, height in splitContour]
                bottomHeight = max(heights) # since inverted
                
                #found, self.xClose, self.yClose, xCentroid, yCentroid = Util.find_centroid(image)
                x = int(sum([width for width, height in splitContour])/float(len(splitContour)))
                #y = int(sum([height for width, height in splitContour])/float(len(splitContour)))
                
                #x,y = self.getCenterOfMass(splitContour)
                xys.append((x,bottomHeight-40))
        
        #Util.showImage(origImg, "image")
        #print xys
        
        if self.show_image:
            Util.showImage(image, "left")
        imgmsg = self.bridge.cv_to_imgmsg(image)
        self.imagepub.publish(imgmsg)
        
        points = []
        marker_array = MarkerArray()
        for xClose,yClose in xys:
            # Search for the closest disparity pixel by searching in a square with larger and larger radius
            disparity = -1000
            for radius in range(50):
                x, y, disparity = self.getBoxDisparity((xClose,yClose), radius, image)
                if disparity > self.minDisparity:
                    break
            
            # Use disparity value to find 3d location of point
            if disparity <= self.minDisparity:
                continue
            
            pt = Util.convertStereo(x, y , disparity, self.info)
            print 'pt'
            print pt
            point = tfx.convertToFrame(pt, '0_link')
            #print 'point'
            #print point
            
            
            if not self.isValidPoint(point):
                continue
            
            
            if point.z < self.min_z_value:
                point.z = self.min_z_value
            
            #print 'posestamped'
            #print tfx.pose(point).msg.PoseStamped()
            
            pose = tfx.pose(point.list)
            pose.frame = point.frame
            
            points.append(tfx.convertToFrame(point, pt.header.frame_id))
            marker = Util.createMarker(tfx.pose(point).msg.PoseStamped(),id=1,lifetime=2)
            marker_array.markers.append(marker)
        for i in xrange(len(marker_array.markers)):
            marker_array.markers[i].id = i
        self.markerpub.publish(marker_array)
        
        if not self.track:
            unique_pts = {}
            for pt in points:
                for id, pt_list in unique_pts.iteritems():
                    if pt_list[0].distance(pt) < self.center_threshold:
                        pt_list.append(pt)
                        break
                else:
                    unique_pts[len(unique_pts)] = [pt]
            for k in unique_pts.iterkeys():
                unique_pts[k] = reduce(operator.add, unique_pts[k])/len(unique_pts[k])
            self.object_centers = unique_pts.values()
            
            # filter out object_centers not in box
            self.object_centers = [object_center for object_center in self.object_centers if self.isValidPoint(object_center)]
            
            msg = FoamPoints()
            msg.header.frame_id = self.info['l'].header.frame_id
            msg.header.stamp = rospy.Time.now()
            
            for center in self.object_centers:
                if center is None:
                    continue
                msg.points.append(center.msg.Point())
            self.pointpub.publish(msg)
            return
                
        
        print '-------------------------'
        print 'current state:'
        print 'ctrs', [c.tostring() for c in self.object_centers if c is not None]
        """
    def depthImageCallback(self, msg):
        self.image['d'] = self.bridge.imgmsg_to_cv(msg, desired_encoding="passthrough")

    def leftImageCallback(self, msg):
        if not self.info['l'] or not self.disparityImg or rospy.is_shutdown():
            return
        
        # Threshold the image
        self.image['l'] = self.process(msg, 'l')
        image = self.image['l']
        if self.show_image:
            # Uncomment to show the thresholded image
            Util.showImage(image, "threshed")

        # find contours
        storage = cv.CreateMemStorage(0)
        
        contours = cv.FindContours(image, storage, mode=cv.CV_RETR_LIST, method=cv.CV_CHAIN_APPROX_SIMPLE)

        if len(contours) == 0:
            return

        # Find the first contour with length > 60 and get the center
        color = cv.Scalar(255)
        holeColor = cv.Scalar(255)
        maxLevel = 1
        thickness = cv.CV_FILLED
        xys = []
        found = False
        
        origImg = self.bridge.imgmsg_to_cv(msg, "bgr8")
        #cv.DrawContours(origImg, contours, color, holeColor, maxLevel, thickness)
        #cv.DrawContours(origImg,contours,-1,(0,255,0),3)
        
        """
        while contours is not None and not rospy.is_shutdown():
            contour = contours[:]
            contours = contours.h_next()
            if len(contour) < 60:
                continue
            found = True
            
            cv.FillPoly(image, [contour], color)
            ys = []
            for cont in contour:
                ys.append(cont[1])
            bottomBound = max(ys)
            x,y = self.getCenterOfMass(contour)
            xys.append((x,bottomBound-40))
        """
        
        
        while contours is not None and not rospy.is_shutdown():
            contour = contours[:]
            contours = contours.h_next()
            if len(contour) < 60:
                continue
            
            splitContours = self.splitByAspect(contour)
            #splitContours = [contour]
            
            #y = int(sum(sum([height for width, height in splitContour])/float(len(splitContour)) for splitContour in splitContours)/float(len(splitContours)))
            
            import numpy as np
            for index in range(len(splitContours)):
                if index != 0: break
                splitContour = splitContours[index]
                if len(splitContour) < 60:
                    continue
                for x, y in splitContour:
                    origImg[y,x] = np.array([(index+1)*50,0,0])
            
            for splitContour in splitContours:
                if len(splitContour) == 0:
                    continue
                
                    #cv.Set2D(origImg,x,y,(0,255,0))
                
                #found = True
                cv.FillPoly(image, [splitContour], color)
                
                heights = [height for width, height in splitContour]
                bottomHeight = max(heights) # since inverted
                
                #found, self.xClose, self.yClose, xCentroid, yCentroid = Util.find_centroid(image)
                x = int(sum([width for width, height in splitContour])/float(len(splitContour)))
                #y = int(sum([height for width, height in splitContour])/float(len(splitContour)))
                
                #x,y = self.getCenterOfMass(splitContour)
                xys.append((x,bottomHeight-40))
        
        #Util.showImage(origImg, "image")
        #print xys
        
        if self.show_image:
            Util.showImage(image, "left")
        imgmsg = self.bridge.cv_to_imgmsg(image)
        self.imagepub.publish(imgmsg)
        
        points = []
        marker_array = MarkerArray()
        for xClose,yClose in xys:
            # Search for the closest disparity pixel by searching in a square with larger and larger radius
            disparity = -1000
            for radius in range(50):
                x, y, disparity = self.getBoxDisparity((xClose,yClose), radius, image)
                if disparity > self.minDisparity:
                    break
            
            # Use disparity value to find 3d location of point
            if disparity <= self.minDisparity:
                continue
            
            pt = Util.convertStereo(x, y , disparity, self.info)
            print 'pt'
            print pt
            point = tfx.convertToFrame(pt, '0_link')
            #print 'point'
            #print point
            
            
            if not self.isValidPoint(point):
                continue
            
            
            if point.z < self.min_z_value:
                point.z = self.min_z_value
            
            #print 'posestamped'
            #print tfx.pose(point).msg.PoseStamped()
            
            pose = tfx.pose(point.list)
            pose.frame = point.frame
            
            points.append(tfx.convertToFrame(point, pt.header.frame_id))
            marker = Util.createMarker(tfx.pose(point).msg.PoseStamped(),id=1,lifetime=2)
            marker_array.markers.append(marker)
        for i in xrange(len(marker_array.markers)):
            marker_array.markers[i].id = i
        self.markerpub.publish(marker_array)
        
        if not self.track:
            unique_pts = {}
            for pt in points:
                for id, pt_list in unique_pts.iteritems():
                    if pt_list[0].distance(pt) < self.center_threshold:
                        pt_list.append(pt)
                        break
                else:
                    unique_pts[len(unique_pts)] = [pt]
            for k in unique_pts.iterkeys():
                unique_pts[k] = reduce(operator.add, unique_pts[k])/len(unique_pts[k])
            self.object_centers = unique_pts.values()
            
            # filter out object_centers not in box
            self.object_centers = [object_center for object_center in self.object_centers if self.isValidPoint(object_center)]
            
            msg = FoamPoints()
            msg.header.frame_id = self.info['l'].header.frame_id
            msg.header.stamp = rospy.Time.now()
            
            for center in self.object_centers:
                if center is None:
                    continue
                msg.points.append(center.msg.Point())
            self.pointpub.publish(msg)
            return
                
        
        print '-------------------------'
        print 'current state:'
        print 'ctrs', [c.tostring() for c in self.object_centers if c is not None]
        
        def find_existing_center(pt, ids):
            for id, ctr in enumerate(self.object_centers):
                if ctr is None and id not in ids:
                    return id
                if ctr is not None and (pt-ctr).norm < self.center_threshold:
                    return id
            print 'dists', [(pt-ctr).norm for ctr in self.object_centers if ctr is not None]
            raise RuntimeError("Point %s not in existing points %s" % (pt, self.object_centers))
        
        print 'input:'
        print 'pts ', [p.tostring() for p in points]
        
        found_ids = []
        for point in points:
            id = find_existing_center(point, found_ids)
            found_ids.append(id)
        print 'ids ', found_ids
        
        unique_found_ids = list(set(found_ids))
        unique_found_points = []
        for id in unique_found_ids:
            points_with_id = [pt for pt_id, pt in zip(found_ids,points) if pt_id==id]
            unique_found_points.append(reduce(operator.add, points_with_id)/len(points_with_id))
            
        if len(unique_found_ids) != len(found_ids):
            print 'combined pts ', [p.tostring() for p in unique_found_points]
            print 'combined ids ', unique_found_ids
        
        found_ids = unique_found_ids
        points = unique_found_points
        
        print 'new state:'
        for id, point in zip(found_ids, points):
            self.object_centers[id] = point
        print 'ctrs', [c.tostring() for c in self.object_centers if c is not None]
        
        msg = FoamPoints()
        msg.header.frame_id = self.info['l'].header.frame_id
        msg.header.stamp = rospy.Time.now()
        ids = []
        points = []
        for id, center in enumerate(self.object_centers):
            if center is None:
                continue
            ids.append(id)
            points.append(center.msg.Point())
        print 'ids ', ids
        if ids:
            msg.ids = ids
            msg.points = points
            self.pointpub.publish(msg)
            
    def splitRecursive(self, contour):
        if len(contour) < 60:
            return [contour]
        
        lenContour = len(contour)
        for index in xrange(lenContour):
            pixel = contour[0]
            otherPixels = contour[int(lenContour/2.):]
            
            
            import numpy as np
            for otherPixel in otherPixels:
                print np.linalg.norm(np.array(otherPixel)-np.array(pixel))
                if np.linalg.norm(np.array(otherPixel)-np.array(pixel)) < 20:
                    contourLeft = [(height, width) for height, width in contour if width < otherPixel[1]]
                    contourRight = [(height, width) for height, width in contour if width >= otherPixel[1]]
                    return [contourLeft, contourRight]
                    #return self.splitRecursive(contourLeft) + self.splitRecursive(contourRight)
            
            contour = contour[1:] + [contour[0]]
            
    def splitByAspect(self, contour):
        
        maxWidth = max(width for width, height in contour)
        minWidth = min(width for width, height in contour)
        widthDifference = maxWidth - minWidth
    
        aspect = max(widthDifference/80, 1)
    
        print 'aspect %d' % aspect
        print 'widthDifference %d' % widthDifference
        print 'minWidth %d' % minWidth
        print 'maxWidth %d' % maxWidth
        
        if aspect == 1:
            return [contour]
        else:
            contours = []
            lb = minWidth
            for i in range(aspect):
                this_lb = lb + float(i)*float(widthDifference)/float(aspect)
                this_ub = lb + float(i+1)*float(widthDifference)/float(aspect)
                print '(lb, ub): ({0},{1})'.format(this_lb,this_ub)
                newContour = [(width, height) for width, height in contour if this_lb <= width <= this_ub]
                print 'contour length %d' % len(newContour)
                contours.append(newContour)
            return contours
            
    def splitContoursHorizontal(self, contour):
        
        # find bottom most pixel
        # go through all pixels
        # if a pixel is close to the bottom most pixel height value and
        # it is not near the min/max of the contour, then split at that width value
        
        # heighest in image
        smallestPixelHeight = min([height for height, width in contour])
        # lowest in image
        largestPixelHeight = max([height for height, width in contour])
        # leftmost in image
        smallestPixelWidth = min([width for height, width in contour])
        #rightmost in image
        largestPixelWidth = max([width for height, width in contour])
        
        distToBottomEdgeBound = 100
        distToWidthEdgeBound = 50
        pixelValleys = []
        
        for pixel in contour:
            height, width = pixel
            if abs(height - largestPixelHeight) < distToBottomEdgeBound and not (abs(width-smallestPixelWidth) < distToWidthEdgeBound or abs(width-largestPixelWidth) < distToWidthEdgeBound):
                pixelValleys.append(pixel)
        
        
        if len(pixelValleys) != 0:        
            splitPixelWidth = sum([width for height, width in pixelValleys])/float(len(pixelValleys))
            leftSplit = [(height, width) for height, width in contour if width < splitPixelWidth]
            rightSplit = [(height, width) for height, width in contour if width >= splitPixelWidth]
            print 'Split!'
            #print leftSplit
            #print rightSplit
            return [leftSplit, rightSplit]
        else:
            return [contour]

        

    def isValidPoint(self, point):
        pt = tfx.point(point).copy()
        pt = tfx.convertToFrame(pt, self.boxBottomLeft.frame, pt.frame, ignore_stamp=True, wait=10)
        
        if (not self.boxBottomLeft.x < pt.x < self.boxTopRight.x) or \
            (not self.boxTopRight.y < pt.y < self.boxBottomLeft.y) or \
            (not self.boxBottomLeft.z < pt.z < self.boxTopRight.z):
            return False
        
        return True
        
    def getCenterOfMass(self, image):
        """
        Gets the center of mass of an image or contour.
        """

        binaryImage = True
        moments = cv.Moments(image, binaryImage)
        total = float(cv.GetSpatialMoment(moments, 0, 0))
        xavg = float(cv.GetSpatialMoment(moments, 1, 0))
        yavg = float(cv.GetSpatialMoment(moments, 0, 1))
        return int(xavg / total), int(yavg / total)

    def getBoxDisparity(self, pt, radius, image):
        """
        Gets a disparity value in a square of radius radius, or None if no disparity value can be found.
        """
        
        xClose, yClose = pt

        dispImg = self.disparityImg
        
        # check left edge
        x = xClose - radius
        for y in range(yClose - radius, yClose + radius + 1):
            d = self.getDisparity(x, y, image, dispImg)
            if d > self.minDisparity:
                return (x, y, d)
                
        # check top edge
        y = yClose + radius
        for x in range(xClose - radius, xClose + radius + 1):
            d = self.getDisparity(x, y, image, dispImg)
            if d > self.minDisparity:
                return (x, y, d)

        # check right edge
        x = xClose + radius
        for y in range(yClose - radius, yClose + radius + 1):
            d = self.getDisparity(x, y, image, dispImg)
            if d > self.minDisparity:
                return (x, y, d)

        return 0,0,0

        # check bottom edge
        y = yClose - radius
        for x in range(xClose - radius, xClose + radius + 1):
            d = self.getDisparity(x, y, image, dispImg)
            if d > self.minDisparity:
                return (x, y, d)

    def getDisparity(self, x, y, image, dispImg):
        if 0 <= y < image.height and 0 <= x < image.width:
            if image[y, x] > 0:
                return cv.GetReal2D(dispImg, y, x)
            
        return -float("inf")
    
    def threshold(self, image, hsvImg, threshImg, lowerHsv, upperHsv):
        cv.Smooth(image, image, cv.CV_GAUSSIAN, 3, 0)
        cv.CvtColor(image, hsvImg, cv.CV_BGR2HSV)
        cv.InRangeS(hsvImg, lowerHsv, upperHsv, threshImg)
        cv.Erode(threshImg, threshImg, None, 1)
        cv.Dilate(threshImg, threshImg, None, 1)
        return threshImg

    def process(self, msg, arm):
        """
        Threshold the image.
        """

        image = self.bridge.imgmsg_to_cv(msg, "bgr8")
        
        if arm == 'l':
            threshImg = self.threshold(image, self.hsvImg, self.threshImg, LOWERHSV, UPPERHSV)
            threshImg2 = self.threshold(image, self.hsvImg, self.threshImg2, LOWERHSV2, UPPERHSV2)
            cv.Or(threshImg, threshImg2, threshImg)
            
            for height in xrange(700, threshImg.height):
                for width in xrange(threshImg.width):
                    threshImg[height, width] = 0.0

            return threshImg
        
        if arm == 'b':
            Util.showImage(image, "rgb")
            rthreshImg = self.threshold(image, self.rhsvImg, self.rthreshImg, LOWERHSV, UPPERHSV)
            rthreshImg2 = self.threshold(image, self.rhsvImg, self.rthreshImg2, LOWERHSV2, UPPERHSV2)
            cv.Or(rthreshImg, rthreshImg2, rthreshImg)
            
            for height in xrange(350, rthreshImg.height):
                for width in xrange(rthreshImg.width):
                    rthreshImg[height, width] = 0.0

            return rthreshImg

if __name__ == '__main__':
    rospy.init_node('foam_segmenter_test')
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--num-objects','-n',type=int,default=1)
    parser.add_argument('--show-image','-i',action='store_true',default=False)
    args = parser.parse_args(rospy.myargv()[1:])
    left_camera = 'left'
    right_camera = 'right'
    rgb_camera = 'camera/rgb'
    depth_camera = 'camera/depth_registered'
    segmenter = FoamSegmenter(left_camera, right_camera, rgb_camera, depth_camera, 'disparity', '/foam_points', **vars(args))
    rospy.spin()
